name: CI Pipeline

on:
  push:
    branches:
      - '**'   # run on all branches
  pull_request:
    branches:
      - main

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: swapi
          POSTGRES_PASSWORD: password
          POSTGRES_DB: swapi
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Speed up builds with dependency cache
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build the test image (multi-stage: test + prod)
      - name: Build test image
        run: docker build --target test -t app:test .

      # Run tests inside container (JUnit already configured in Dockerfile)
      - name: Run tests
        run: |
          docker run --rm \
            --network host \
            -e DATABASE_URL=postgres://swapi:password@localhost:5432/swapi \
            -v $PWD:/home/node/app \
            -w /home/node/app \
            app:test npm test

      # Publish test results directly in PR UI
      - name: Publish Test Results
        if: always()
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: 'junit.xml'
          require_tests: true

      # Upload raw results as artifact (backup)
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: junit.xml

      # Push release image only from main branch
      - name: Log in to ttl.sh
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: echo "${{ secrets.TTL_SH_TOKEN }}" | docker login ttl.sh -u anonymous --password-stdin

      - name: Build and push release image
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          IMAGE_NAME=ttl.sh/floatschedule-sre-assignment:${{ github.sha }}
          docker build --target production -t $IMAGE_NAME .
          docker push $IMAGE_NAME
