{"file":"/tmp/src/services/planet.service.ts","mappings":";;;AAEA,+DAA4D;AAG5D,MAAa,aAAa;IAIxB,YAAY,YAA0B,EAAE,gBAAkC;QACxE,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,EAAU;QAC5B,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QACzD,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,0BAA0B,CAAC,EAAE,CAAC,CAAC;QAEhF,8DAA8D;QAC9D,MAAM,SAAS,GAAG,YAAY,KAAK,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC;QAE/D,OAAO,IAAA,yBAAW,EAAC,UAAU,EAAE,SAAS,CAAC,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,6BAA6B,CAAC,EAAU,EAAE,SAAkB;QAChE,MAAM,IAAI,CAAC,gBAAgB,CAAC,6BAA6B,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;QAEzE,OAAO,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;IAChC,CAAC;CACF;AAxBD,sCAwBC","names":[],"sources":["/tmp/src/services/planet.service.ts"],"sourcesContent":["import { SwapiAdapter } from '../adapters/swapi.adapter';\nimport { Planet } from '../types/entities.types';\nimport { mapToPlanet } from './service-mappers/mapToPlanet';\nimport { PlanetRepository } from '../repositories/planet.repository';\n\nexport class PlanetService {\n  private swapiAdapter: SwapiAdapter;\n  private planetRepository: PlanetRepository;\n\n  constructor(swapiAdapter: SwapiAdapter, planetRepository: PlanetRepository) {\n    this.swapiAdapter = swapiAdapter;\n    this.planetRepository = planetRepository;\n  }\n\n  async getPlanetById(id: string): Promise<Planet> {\n    const planetData = await this.swapiAdapter.getPlanet(id);\n    const planetStatus = await this.planetRepository.getPlanetDestructionStatus(id);\n\n    // If planet is not in the database, consider it not destroyed\n    const destroyed = planetStatus !== null ? planetStatus : false;\n\n    return mapToPlanet(planetData, destroyed);\n  }\n\n  async upsertPlanetDestructionStatus(id: string, destroyed: boolean): Promise<Planet> {\n    await this.planetRepository.upsertPlanetDestructionStatus(id, destroyed);\n\n    return this.getPlanetById(id);\n  }\n}"],"version":3}