{"file":"/tmp/src/services/species.service.test.ts","mappings":"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","names":[],"sources":["/tmp/src/services/species.service.test.ts"],"sourcesContent":["import { SpeciesService } from './species.service';\nimport { SwapiAdapter } from '../adapters/swapi.adapter';\nimport { PlanetService } from './planet.service';\nimport { Planet } from '../types/entities.types';\nimport { PlanetRepository } from '../repositories/planet.repository';\n\njest.mock('../adapters/swapi.adapter');\njest.mock('../repositories/planet.repository');\njest.mock('./planet.service');\n\ndescribe('SpeciesService', () => {\n  let speciesService: SpeciesService;\n  let mockSwapiAdapter: jest.Mocked<SwapiAdapter>;\n  let mockPlanetService: jest.Mocked<PlanetService>;\n  let mockPlanetRepository: jest.Mocked<PlanetRepository>;\n\n  const mockPlanet: Planet = {\n    name: 'Tatooine',\n    rotation_period: '23',\n    orbital_period: '304',\n    diameter: '10465',\n    climate: 'arid',\n    gravity: '1 standard',\n    terrain: 'desert',\n    surface_water: '1',\n    population: '200000',\n    destroyed: false,\n    residents: ['https://swapi.dev/api/people/1/'],\n    films: ['https://swapi.dev/api/films/1/'],\n    created: '2014-12-09T13:50:49.641000Z',\n    edited: '2014-12-20T20:58:18.411000Z',\n    url: 'https://swapi.dev/api/planets/1/'\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockSwapiAdapter = new SwapiAdapter() as jest.Mocked<SwapiAdapter>;\n    mockPlanetRepository = new PlanetRepository() as jest.Mocked<PlanetRepository>;\n    mockPlanetService = new PlanetService(mockSwapiAdapter, mockPlanetRepository) as jest.Mocked<PlanetService>;\n\n    speciesService = new SpeciesService(mockSwapiAdapter, mockPlanetService);\n  });\n\n  describe('getSpeciesById', () => {\n    it('should return species with homeworld data when homeworld exists', async () => {\n      const mockSpecies = {\n        name: 'Human',\n        classification: 'mammal',\n        designation: 'sentient',\n        average_height: '180',\n        skin_colors: 'caucasian, black, asian, hispanic',\n        hair_colors: 'blonde, brown, black, red',\n        eye_colors: 'brown, blue, green, hazel, grey, amber',\n        average_lifespan: '120',\n        homeworld: 'https://swapi.dev/api/planets/1/',\n        language: 'Galactic Basic',\n        people: ['https://swapi.dev/api/people/1/'],\n        films: ['https://swapi.dev/api/films/1/'],\n        created: '2014-12-09T13:50:49.641000Z',\n        edited: '2014-12-20T20:58:18.411000Z',\n        url: 'https://swapi.dev/api/species/1/'\n      };\n\n      mockSwapiAdapter.getSpecies.mockResolvedValue(mockSpecies);\n      mockPlanetService.getPlanetById.mockResolvedValue(mockPlanet);\n\n      const result = await speciesService.getSpeciesById('1');\n\n      expect(result).toEqual({\n        name: 'Human',\n        classification: 'mammal',\n        designation: 'sentient',\n        average_height: '180',\n        skin_colors: 'caucasian, black, asian, hispanic',\n        hair_colors: 'blonde, brown, black, red',\n        eye_colors: 'brown, blue, green, hazel, grey, amber',\n        average_lifespan: '120',\n        homeworld: mockPlanet,\n        language: 'Galactic Basic',\n        people: ['https://swapi.dev/api/people/1/'],\n        films: ['https://swapi.dev/api/films/1/'],\n        created: '2014-12-09T13:50:49.641000Z',\n        edited: '2014-12-20T20:58:18.411000Z',\n        url: 'https://swapi.dev/api/species/1/'\n      });\n      expect(mockSwapiAdapter.getSpecies).toHaveBeenCalledWith('1');\n      expect(mockPlanetService.getPlanetById).toHaveBeenCalledWith('1');\n    });\n\n    it('should return species with null homeworld when homeworld does not exist', async () => {\n      const mockSpecies = {\n        name: 'Droid',\n        classification: 'artificial',\n        designation: 'sentient',\n        average_height: 'n/a',\n        skin_colors: 'n/a',\n        hair_colors: 'n/a',\n        eye_colors: 'n/a',\n        average_lifespan: 'indefinite',\n        homeworld: null,\n        language: 'n/a',\n        people: ['https://swapi.dev/api/people/2/'],\n        films: ['https://swapi.dev/api/films/1/'],\n        created: '2014-12-10T15:16:16.259000Z',\n        edited: '2014-12-20T21:36:42.139000Z',\n        url: 'https://swapi.dev/api/species/2/'\n      };\n\n      mockSwapiAdapter.getSpecies.mockResolvedValue(mockSpecies);\n\n      const result = await speciesService.getSpeciesById('2');\n\n      expect(mockSwapiAdapter.getSpecies).toHaveBeenCalledWith('2');\n      expect(mockPlanetService.getPlanetById).not.toHaveBeenCalled();\n      expect(result).toEqual({\n        name: 'Droid',\n        classification: 'artificial',\n        designation: 'sentient',\n        average_height: 'n/a',\n        skin_colors: 'n/a',\n        hair_colors: 'n/a',\n        eye_colors: 'n/a',\n        average_lifespan: 'indefinite',\n        homeworld: null,\n        language: 'n/a',\n        people: ['https://swapi.dev/api/people/2/'],\n        films: ['https://swapi.dev/api/films/1/'],\n        created: '2014-12-10T15:16:16.259000Z',\n        edited: '2014-12-20T21:36:42.139000Z',\n        url: 'https://swapi.dev/api/species/2/'\n      });\n    });\n  });\n\n  describe('getAllSpecies', () => {\n    it('should return all species with homeworld data', async () => {\n      const mockSpeciesData = [\n        {\n          name: 'Human',\n          classification: 'mammal',\n          designation: 'sentient',\n          average_height: '180',\n          skin_colors: 'caucasian, black, asian, hispanic',\n          hair_colors: 'blonde, brown, black, red',\n          eye_colors: 'brown, blue, green, hazel, grey, amber',\n          average_lifespan: '120',\n          homeworld: 'https://swapi.dev/api/planets/1/',\n          language: 'Galactic Basic',\n          people: ['https://swapi.dev/api/people/1/'],\n          films: ['https://swapi.dev/api/films/1/'],\n          created: '2014-12-09T13:50:49.641000Z',\n          edited: '2014-12-20T20:58:18.411000Z',\n          url: 'https://swapi.dev/api/species/1/'\n        }\n      ];\n\n      mockSwapiAdapter.getAllSpecies.mockResolvedValue(mockSpeciesData);\n      mockPlanetService.getPlanetById.mockResolvedValue(mockPlanet);\n\n      const result = await speciesService.getAllSpecies();\n\n      expect(mockSwapiAdapter.getAllSpecies).toHaveBeenCalled();\n      expect(mockPlanetService.getPlanetById).toHaveBeenCalledWith('1');\n      expect(result).toEqual([\n        {\n          name: 'Human',\n          classification: 'mammal',\n          designation: 'sentient',\n          average_height: '180',\n          skin_colors: 'caucasian, black, asian, hispanic',\n          hair_colors: 'blonde, brown, black, red',\n          eye_colors: 'brown, blue, green, hazel, grey, amber',\n          average_lifespan: '120',\n          homeworld: mockPlanet,\n          language: 'Galactic Basic',\n          people: ['https://swapi.dev/api/people/1/'],\n          films: ['https://swapi.dev/api/films/1/'],\n          created: '2014-12-09T13:50:49.641000Z',\n          edited: '2014-12-20T20:58:18.411000Z',\n          url: 'https://swapi.dev/api/species/1/'\n        }\n      ]);\n    });\n\n    it('should sort species by average height when sort parameter is provided', async () => {\n      const mockSpeciesData = [\n        {\n          name: 'Human',\n          classification: 'mammal',\n          designation: 'sentient',\n          average_height: '180',\n          skin_colors: 'caucasian, black, asian, hispanic',\n          hair_colors: 'blonde, brown, black, red',\n          eye_colors: 'brown, blue, green, hazel, grey, amber',\n          average_lifespan: '120',\n          homeworld: 'https://swapi.dev/api/planets/1/',\n          language: 'Galactic Basic',\n          people: ['https://swapi.dev/api/people/1/'],\n          films: ['https://swapi.dev/api/films/1/'],\n          created: '2014-12-09T13:50:49.641000Z',\n          edited: '2014-12-20T20:58:18.411000Z',\n          url: 'https://swapi.dev/api/species/1/'\n        },\n        {\n          name: 'Wookie',\n          classification: 'mammal',\n          designation: 'sentient',\n          average_height: '210',\n          skin_colors: 'gray',\n          hair_colors: 'black, brown',\n          eye_colors: 'blue, green, yellow, brown, golden, red',\n          average_lifespan: '400',\n          homeworld: 'https://swapi.dev/api/planets/1/',\n          language: 'Shyriiwook',\n          people: ['https://swapi.dev/api/people/13/'],\n          films: ['https://swapi.dev/api/films/1/'],\n          created: '2014-12-10T16:44:31.486000Z',\n          edited: '2014-12-20T21:36:42.142000Z',\n          url: 'https://swapi.dev/api/species/3/'\n        }\n      ];\n\n      mockSwapiAdapter.getAllSpecies.mockResolvedValue(mockSpeciesData);\n      mockPlanetService.getPlanetById.mockResolvedValue(mockPlanet);\n\n      // Test ascending order\n      const resultAsc = await speciesService.getAllSpecies('average_height', 'asc');\n\n      expect(resultAsc[0].name).toBe('Human'); // 180\n      expect(resultAsc[1].name).toBe('Wookie'); // 210\n\n      // Test descending order\n      const resultDesc = await speciesService.getAllSpecies('average_height', 'desc');\n\n      expect(resultDesc[0].name).toBe('Wookie'); // 210\n      expect(resultDesc[1].name).toBe('Human'); // 180\n    });\n  });\n\n  describe('sortSpeciesByAverageHeight', () => {\n    it('should sort species by average height in ascending order', () => {\n      const species = [\n        { average_height: '180', name: 'Human' } as any,\n        { average_height: '210', name: 'Wookie' } as any,\n        { average_height: '66', name: 'Jawa' } as any,\n      ];\n\n      const result = speciesService.sortSpeciesByAverageHeight(species, 'asc');\n\n      expect(result[0].name).toBe('Jawa'); // 66\n      expect(result[1].name).toBe('Human'); // 180\n      expect(result[2].name).toBe('Wookie'); // 210\n    });\n\n    it('should sort species by average height in descending order', () => {\n      const species = [\n        { average_height: '180', name: 'Human' } as any,\n        { average_height: '210', name: 'Wookie' } as any,\n        { average_height: '66', name: 'Jawa' } as any,\n      ];\n\n      const result = speciesService.sortSpeciesByAverageHeight(species, 'desc');\n\n      expect(result[0].name).toBe('Wookie'); // 210\n      expect(result[1].name).toBe('Human'); // 180\n      expect(result[2].name).toBe('Jawa'); // 66\n    });\n\n    it('should place species with non-numeric heights at the end', () => {\n      const species = [\n        { average_height: '180', name: 'Human' } as any,\n        { average_height: 'unknown', name: 'Unknown Species' } as any,\n        { average_height: '66', name: 'Jawa' } as any,\n      ];\n\n      const result = speciesService.sortSpeciesByAverageHeight(species, 'asc');\n\n      expect(result[0].name).toBe('Jawa'); // 66\n      expect(result[1].name).toBe('Human'); // 180\n      expect(result[2].name).toBe('Unknown Species'); // unknown\n    });\n  });\n});\n"],"version":3}