3b0834d898dc1fd001f47d9ab71261dc
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwapiAdapter = void 0;
class SwapiAdapter {
    constructor(baseUrl = 'https://swapi.dev/api') {
        this.baseUrl = baseUrl;
    }
    async getSpecies(id) {
        const response = await fetch(`${this.baseUrl}/species/${id}`);
        if (!response.ok) {
            if (response.status === 404) {
                throw new Error(`Species with ID ${id} not found`);
            }
            throw new Error(`Error fetching species: ${response.statusText}`);
        }
        return await response.json();
    }
    async getSpeciesPage(page = 1) {
        const response = await fetch(`${this.baseUrl}/species/?page=${page}`);
        if (!response.ok) {
            if (response.status === 404) {
                throw new Error(`Species page ${page} not found`);
            }
            throw new Error(`Error fetching species page: ${response.statusText}`);
        }
        return await response.json();
    }
    async getAllSpecies() {
        let allSpecies = [];
        let currentPage = 1;
        let hasNextPage = true;
        while (hasNextPage) {
            const response = await this.getSpeciesPage(currentPage);
            allSpecies = [...allSpecies, ...response.results];
            hasNextPage = !!response.next;
            currentPage++;
        }
        return allSpecies;
    }
    async getPlanet(id) {
        const response = await fetch(`${this.baseUrl}/planets/${id}`);
        if (!response.ok) {
            if (response.status === 404) {
                throw new Error(`Planet with ID ${id} not found`);
            }
            throw new Error(`Error fetching planet: ${response.statusText}`);
        }
        return await response.json();
    }
}
exports.SwapiAdapter = SwapiAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL3RtcC9zcmMvYWRhcHRlcnMvc3dhcGkuYWRhcHRlci50cyIsIm1hcHBpbmdzIjoiOzs7QUFFQSxNQUFhLFlBQVk7SUFHdkIsWUFBWSxPQUFPLEdBQUcsdUJBQXVCO1FBQzNDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQVU7UUFDekIsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFOUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNqQixJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7Z0JBQzVCLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDckQsQ0FBQztZQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQ3BFLENBQUM7UUFFRCxPQUFPLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBa0IsQ0FBQztJQUMvQyxDQUFDO0lBRU8sS0FBSyxDQUFDLGNBQWMsQ0FBQyxPQUFlLENBQUM7UUFDM0MsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxrQkFBa0IsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUV0RSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ2pCLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztnQkFDNUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsSUFBSSxZQUFZLENBQUMsQ0FBQztZQUNwRCxDQUFDO1lBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFDekUsQ0FBQztRQUVELE9BQU8sTUFBTSxRQUFRLENBQUMsSUFBSSxFQUEwQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRCxLQUFLLENBQUMsYUFBYTtRQUNqQixJQUFJLFVBQVUsR0FBbUIsRUFBRSxDQUFDO1FBQ3BDLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQztRQUNwQixJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFFdkIsT0FBTyxXQUFXLEVBQUUsQ0FBQztZQUNuQixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDeEQsVUFBVSxHQUFHLENBQUMsR0FBRyxVQUFVLEVBQUUsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFbEQsV0FBVyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1lBQzlCLFdBQVcsRUFBRSxDQUFDO1FBQ2hCLENBQUM7UUFFRCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBRUQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFVO1FBQ3hCLE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRTlELElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDakIsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO2dCQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQ3BELENBQUM7WUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixRQUFRLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztRQUNuRSxDQUFDO1FBRUQsT0FBTyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQWlCLENBQUM7SUFDOUMsQ0FBQztDQUNGO0FBN0RELG9DQTZEQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvdG1wL3NyYy9hZGFwdGVycy9zd2FwaS5hZGFwdGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN3YXBpU3BlY2llcywgU3dhcGlQbGFuZXQsIFN3YXBpUGFnaW5hdGVkUmVzcG9uc2UgfSBmcm9tICcuLi90eXBlcy9zd2FwaS50eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBTd2FwaUFkYXB0ZXIge1xuICBwcml2YXRlIGJhc2VVcmw6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihiYXNlVXJsID0gJ2h0dHBzOi8vc3dhcGkuZGV2L2FwaScpIHtcbiAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xuICB9XG5cbiAgYXN5bmMgZ2V0U3BlY2llcyhpZDogc3RyaW5nKTogUHJvbWlzZTxTd2FwaVNwZWNpZXM+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3RoaXMuYmFzZVVybH0vc3BlY2llcy8ke2lkfWApO1xuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgU3BlY2llcyB3aXRoIElEICR7aWR9IG5vdCBmb3VuZGApO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciBmZXRjaGluZyBzcGVjaWVzOiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKSBhcyBTd2FwaVNwZWNpZXM7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdldFNwZWNpZXNQYWdlKHBhZ2U6IG51bWJlciA9IDEpOiBQcm9taXNlPFN3YXBpUGFnaW5hdGVkUmVzcG9uc2U8U3dhcGlTcGVjaWVzPj4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7dGhpcy5iYXNlVXJsfS9zcGVjaWVzLz9wYWdlPSR7cGFnZX1gKTtcblxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwNCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFNwZWNpZXMgcGFnZSAke3BhZ2V9IG5vdCBmb3VuZGApO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciBmZXRjaGluZyBzcGVjaWVzIHBhZ2U6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpIGFzIFN3YXBpUGFnaW5hdGVkUmVzcG9uc2U8U3dhcGlTcGVjaWVzPjtcbiAgfVxuXG4gIGFzeW5jIGdldEFsbFNwZWNpZXMoKTogUHJvbWlzZTxTd2FwaVNwZWNpZXNbXT4ge1xuICAgIGxldCBhbGxTcGVjaWVzOiBTd2FwaVNwZWNpZXNbXSA9IFtdO1xuICAgIGxldCBjdXJyZW50UGFnZSA9IDE7XG4gICAgbGV0IGhhc05leHRQYWdlID0gdHJ1ZTtcblxuICAgIHdoaWxlIChoYXNOZXh0UGFnZSkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldFNwZWNpZXNQYWdlKGN1cnJlbnRQYWdlKTtcbiAgICAgIGFsbFNwZWNpZXMgPSBbLi4uYWxsU3BlY2llcywgLi4ucmVzcG9uc2UucmVzdWx0c107XG5cbiAgICAgIGhhc05leHRQYWdlID0gISFyZXNwb25zZS5uZXh0O1xuICAgICAgY3VycmVudFBhZ2UrKztcbiAgICB9XG5cbiAgICByZXR1cm4gYWxsU3BlY2llcztcbiAgfVxuXG4gIGFzeW5jIGdldFBsYW5ldChpZDogc3RyaW5nKTogUHJvbWlzZTxTd2FwaVBsYW5ldD4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7dGhpcy5iYXNlVXJsfS9wbGFuZXRzLyR7aWR9YCk7XG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQbGFuZXQgd2l0aCBJRCAke2lkfSBub3QgZm91bmRgKTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgZmV0Y2hpbmcgcGxhbmV0OiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKSBhcyBTd2FwaVBsYW5ldDtcbiAgfVxufSJdLCJ2ZXJzaW9uIjozfQ==