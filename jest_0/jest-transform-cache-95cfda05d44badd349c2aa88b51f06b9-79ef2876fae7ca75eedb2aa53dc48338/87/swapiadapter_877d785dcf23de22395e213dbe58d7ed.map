{"file":"/tmp/src/adapters/swapi.adapter.ts","mappings":";;;AAEA,MAAa,YAAY;IAGvB,YAAY,OAAO,GAAG,uBAAuB;QAC3C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,EAAU;QACzB,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,OAAO,YAAY,EAAE,EAAE,CAAC,CAAC;QAE9D,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;YACjB,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;gBAC5B,MAAM,IAAI,KAAK,CAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC;YACrD,CAAC;YACD,MAAM,IAAI,KAAK,CAAC,2BAA2B,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;QACpE,CAAC;QAED,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAkB,CAAC;IAC/C,CAAC;IAEO,KAAK,CAAC,cAAc,CAAC,OAAe,CAAC;QAC3C,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,OAAO,kBAAkB,IAAI,EAAE,CAAC,CAAC;QAEtE,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;YACjB,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;gBAC5B,MAAM,IAAI,KAAK,CAAC,gBAAgB,IAAI,YAAY,CAAC,CAAC;YACpD,CAAC;YACD,MAAM,IAAI,KAAK,CAAC,gCAAgC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;QACzE,CAAC;QAED,OAAO,MAAM,QAAQ,CAAC,IAAI,EAA0C,CAAC;IACvE,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,IAAI,UAAU,GAAmB,EAAE,CAAC;QACpC,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,IAAI,WAAW,GAAG,IAAI,CAAC;QAEvB,OAAO,WAAW,EAAE,CAAC;YACnB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YACxD,UAAU,GAAG,CAAC,GAAG,UAAU,EAAE,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;YAElD,WAAW,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;YAC9B,WAAW,EAAE,CAAC;QAChB,CAAC;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,EAAU;QACxB,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,OAAO,YAAY,EAAE,EAAE,CAAC,CAAC;QAE9D,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;YACjB,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;gBAC5B,MAAM,IAAI,KAAK,CAAC,kBAAkB,EAAE,YAAY,CAAC,CAAC;YACpD,CAAC;YACD,MAAM,IAAI,KAAK,CAAC,0BAA0B,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;QACnE,CAAC;QAED,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAiB,CAAC;IAC9C,CAAC;CACF;AA7DD,oCA6DC","names":[],"sources":["/tmp/src/adapters/swapi.adapter.ts"],"sourcesContent":["import { SwapiSpecies, SwapiPlanet, SwapiPaginatedResponse } from '../types/swapi.types';\n\nexport class SwapiAdapter {\n  private baseUrl: string;\n\n  constructor(baseUrl = 'https://swapi.dev/api') {\n    this.baseUrl = baseUrl;\n  }\n\n  async getSpecies(id: string): Promise<SwapiSpecies> {\n    const response = await fetch(`${this.baseUrl}/species/${id}`);\n\n    if (!response.ok) {\n      if (response.status === 404) {\n        throw new Error(`Species with ID ${id} not found`);\n      }\n      throw new Error(`Error fetching species: ${response.statusText}`);\n    }\n\n    return await response.json() as SwapiSpecies;\n  }\n\n  private async getSpeciesPage(page: number = 1): Promise<SwapiPaginatedResponse<SwapiSpecies>> {\n    const response = await fetch(`${this.baseUrl}/species/?page=${page}`);\n\n    if (!response.ok) {\n      if (response.status === 404) {\n        throw new Error(`Species page ${page} not found`);\n      }\n      throw new Error(`Error fetching species page: ${response.statusText}`);\n    }\n\n    return await response.json() as SwapiPaginatedResponse<SwapiSpecies>;\n  }\n\n  async getAllSpecies(): Promise<SwapiSpecies[]> {\n    let allSpecies: SwapiSpecies[] = [];\n    let currentPage = 1;\n    let hasNextPage = true;\n\n    while (hasNextPage) {\n      const response = await this.getSpeciesPage(currentPage);\n      allSpecies = [...allSpecies, ...response.results];\n\n      hasNextPage = !!response.next;\n      currentPage++;\n    }\n\n    return allSpecies;\n  }\n\n  async getPlanet(id: string): Promise<SwapiPlanet> {\n    const response = await fetch(`${this.baseUrl}/planets/${id}`);\n\n    if (!response.ok) {\n      if (response.status === 404) {\n        throw new Error(`Planet with ID ${id} not found`);\n      }\n      throw new Error(`Error fetching planet: ${response.statusText}`);\n    }\n\n    return await response.json() as SwapiPlanet;\n  }\n}"],"version":3}