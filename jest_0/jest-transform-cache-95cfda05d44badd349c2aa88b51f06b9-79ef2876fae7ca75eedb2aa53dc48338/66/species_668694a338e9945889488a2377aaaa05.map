{"file":"/tmp/src/api/routes/species.ts","mappings":";;AACA,gEAA4D;AAC5D,oEAAgE;AAChE,4EAAwE;AACxE,kEAA8D;AAC9D,mDAA+E;AAE/E,MAAM,aAAa,GAAuB,KAAK,EAAE,OAAwB,EAAE,EAAE;IAC3E,MAAM,YAAY,GAAG,IAAI,4BAAY,EAAE,CAAC;IACxC,MAAM,gBAAgB,GAAG,IAAI,oCAAgB,EAAE,CAAC;IAChD,MAAM,aAAa,GAAG,IAAI,8BAAa,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC;IACxE,MAAM,cAAc,GAAG,IAAI,gCAAc,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;IAEvE,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QAC/C,MAAM,KAAK,GAAG,OAAO,CAAC,KAA0C,CAAC;QAEjE,MAAM,IAAI,GAAG,IAAA,uBAAY,EAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACtC,MAAM,KAAK,GAAG,IAAA,wBAAa,EAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAEzC,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,aAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAChE,OAAO,EAAE,OAAO,EAAE,CAAC;IACrB,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QACnD,MAAM,MAAM,GAAG,OAAO,CAAC,MAAwB,CAAC;QAEhD,MAAM,EAAE,GAAG,IAAA,qBAAU,EAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACjC,IAAI,CAAC,EAAE,EAAE,CAAC;YACR,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAChB,OAAO,EAAE,KAAK,EAAE,oBAAoB,EAAE,CAAC;QACzC,CAAC;QAED,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;QACxD,OAAO,EAAE,OAAO,EAAE,CAAC;IACrB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,kBAAe,aAAa,CAAC","names":[],"sources":["/tmp/src/api/routes/species.ts"],"sourcesContent":["import { FastifyInstance, FastifyPluginAsync } from 'fastify';\nimport { SwapiAdapter } from '../../adapters/swapi.adapter';\nimport { SpeciesService } from '../../services/species.service';\nimport { PlanetRepository } from '../../repositories/planet.repository';\nimport { PlanetService } from '../../services/planet.service';\nimport { sanitizeId, sanitizeOrder, sanitizeSort } from '../../utils/sanitize';\n\nconst speciesRoutes: FastifyPluginAsync = async (fastify: FastifyInstance) => {\n  const swapiAdapter = new SwapiAdapter();\n  const planetRepository = new PlanetRepository();\n  const planetService = new PlanetService(swapiAdapter, planetRepository);\n  const speciesService = new SpeciesService(swapiAdapter, planetService);\n\n  fastify.get('/species', async (request, reply) => {\n    const query = request.query as { sort?: string; order?: string };\n\n    const sort = sanitizeSort(query.sort);\n    const order = sanitizeOrder(query.order);\n\n    const species = await speciesService.getAllSpecies(sort, order);\n    return { species };\n  });\n\n  fastify.get('/species/:id', async (request, reply) => {\n    const params = request.params as { id: string };\n\n    const id = sanitizeId(params.id);\n    if (!id) {\n      reply.code(400);\n      return { error: 'Invalid species ID' };\n    }\n\n    const species = await speciesService.getSpeciesById(id);\n    return { species };\n  });\n};\n\nexport default speciesRoutes;"],"version":3}