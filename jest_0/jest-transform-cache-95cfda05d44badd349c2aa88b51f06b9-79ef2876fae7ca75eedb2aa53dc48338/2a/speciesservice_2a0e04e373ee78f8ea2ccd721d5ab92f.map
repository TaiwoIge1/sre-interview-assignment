{"file":"/tmp/src/services/species.service.ts","mappings":"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","names":[],"sources":["/tmp/src/services/species.service.ts"],"sourcesContent":["import { SwapiAdapter } from '../adapters/swapi.adapter';\nimport { Species } from '../types/entities.types';\nimport { mapToSpecies } from './service-mappers/mapToSpecies';\nimport { PlanetService } from './planet.service';\n\nexport class SpeciesService {\n  private swapiAdapter: SwapiAdapter;\n  private planetService: PlanetService;\n\n  constructor(swapiAdapter: SwapiAdapter, planetService: PlanetService) {\n    this.swapiAdapter = swapiAdapter;\n    this.planetService = planetService;\n  }\n\n  async getSpeciesById(id: string): Promise<Species> {\n    const speciesData = await this.swapiAdapter.getSpecies(id);\n\n    if(!speciesData.homeworld) {\n      return mapToSpecies(speciesData, null);\n    }\n\n    const planetId = this.extractIdFromUrl(speciesData.homeworld);\n    const planetData = await this.planetService.getPlanetById(planetId);\n\n    return mapToSpecies(speciesData, planetData);\n  }\n\n  async getAllSpecies(sort?: string, order: 'asc' | 'desc' = 'asc'): Promise<Species[]> {\n    const allSpeciesData = await this.swapiAdapter.getAllSpecies();\n\n    const enhancedSpecies = await Promise.all(\n      allSpeciesData.map(async (speciesData) => {\n        if (!speciesData.homeworld) {\n          return mapToSpecies(speciesData, null);\n        }\n\n        const planetId = this.extractIdFromUrl(speciesData.homeworld);\n        const planetData = await this.planetService.getPlanetById(planetId);\n\n        return mapToSpecies(speciesData, planetData);\n      })\n    );\n\n    if (sort === 'average_height') {\n      return this.sortSpeciesByAverageHeight(enhancedSpecies, order);\n    }\n\n    return enhancedSpecies;\n  }\n\n  sortSpeciesByAverageHeight(species: Species[], order: 'asc' | 'desc'): Species[] {\n    return [...species].sort((a, b) => {\n      const heightA = this.parseHeight(a.average_height);\n      const heightB = this.parseHeight(b.average_height);\n\n      // Always place nulls at the end regardless of sort order\n      if (heightA === null) return 1;\n      if (heightB === null) return -1;\n\n      return order === 'asc' ? heightA - heightB : heightB - heightA;\n    });\n  }\n\n  // Parse the height as a number, return null if it's not a number (like \"undefined\")\n  private parseHeight(height: string): number | null {\n    const parsed = parseFloat(height);\n    return isNaN(parsed) ? null : parsed;\n  }\n\n  private extractIdFromUrl(url: string): string {\n    // Remove trailing slash if present\n    const cleanUrl = url.endsWith('/') ? url.slice(0, -1) : url;\n    // Get the last part of the URL which should be the ID\n    return cleanUrl.split('/').pop() || '';\n  }\n}"],"version":3}