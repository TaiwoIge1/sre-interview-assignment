2055115949995e5d948cd39fd22cecf2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpeciesService = void 0;
const mapToSpecies_1 = require("./service-mappers/mapToSpecies");
class SpeciesService {
    constructor(swapiAdapter, planetService) {
        this.swapiAdapter = swapiAdapter;
        this.planetService = planetService;
    }
    async getSpeciesById(id) {
        const speciesData = await this.swapiAdapter.getSpecies(id);
        if (!speciesData.homeworld) {
            return (0, mapToSpecies_1.mapToSpecies)(speciesData, null);
        }
        const planetId = this.extractIdFromUrl(speciesData.homeworld);
        const planetData = await this.planetService.getPlanetById(planetId);
        return (0, mapToSpecies_1.mapToSpecies)(speciesData, planetData);
    }
    async getAllSpecies(sort, order = 'asc') {
        const allSpeciesData = await this.swapiAdapter.getAllSpecies();
        const enhancedSpecies = await Promise.all(allSpeciesData.map(async (speciesData) => {
            if (!speciesData.homeworld) {
                return (0, mapToSpecies_1.mapToSpecies)(speciesData, null);
            }
            const planetId = this.extractIdFromUrl(speciesData.homeworld);
            const planetData = await this.planetService.getPlanetById(planetId);
            return (0, mapToSpecies_1.mapToSpecies)(speciesData, planetData);
        }));
        if (sort === 'average_height') {
            return this.sortSpeciesByAverageHeight(enhancedSpecies, order);
        }
        return enhancedSpecies;
    }
    sortSpeciesByAverageHeight(species, order) {
        return [...species].sort((a, b) => {
            const heightA = this.parseHeight(a.average_height);
            const heightB = this.parseHeight(b.average_height);
            // Always place nulls at the end regardless of sort order
            if (heightA === null)
                return 1;
            if (heightB === null)
                return -1;
            return order === 'asc' ? heightA - heightB : heightB - heightA;
        });
    }
    // Parse the height as a number, return null if it's not a number (like "undefined")
    parseHeight(height) {
        const parsed = parseFloat(height);
        return isNaN(parsed) ? null : parsed;
    }
    extractIdFromUrl(url) {
        // Remove trailing slash if present
        const cleanUrl = url.endsWith('/') ? url.slice(0, -1) : url;
        // Get the last part of the URL which should be the ID
        return cleanUrl.split('/').pop() || '';
    }
}
exports.SpeciesService = SpeciesService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUN2QyxDQUFDO0lBRU8sZ0JBQWdCLENBQUMsR0FBVztRQUNsQyxtQ0FBbUM7UUFDbkMsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQzVELHNEQUFzRDtRQUN0RCxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDO0lBQ3pDLENBQUM7Q0FDRjtBQXRFRCx3Q0FzRUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL3RtcC9zcmMvc2VydmljZXMvc3BlY2llcy5zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN3YXBpQWRhcHRlciB9IGZyb20gJy4uL2FkYXB0ZXJzL3N3YXBpLmFkYXB0ZXInO1xuaW1wb3J0IHsgU3BlY2llcyB9IGZyb20gJy4uL3R5cGVzL2VudGl0aWVzLnR5cGVzJztcbmltcG9ydCB7IG1hcFRvU3BlY2llcyB9IGZyb20gJy4vc2VydmljZS1tYXBwZXJzL21hcFRvU3BlY2llcyc7XG5pbXBvcnQgeyBQbGFuZXRTZXJ2aWNlIH0gZnJvbSAnLi9wbGFuZXQuc2VydmljZSc7XG5cbmV4cG9ydCBjbGFzcyBTcGVjaWVzU2VydmljZSB7XG4gIHByaXZhdGUgc3dhcGlBZGFwdGVyOiBTd2FwaUFkYXB0ZXI7XG4gIHByaXZhdGUgcGxhbmV0U2VydmljZTogUGxhbmV0U2VydmljZTtcblxuICBjb25zdHJ1Y3Rvcihzd2FwaUFkYXB0ZXI6IFN3YXBpQWRhcHRlciwgcGxhbmV0U2VydmljZTogUGxhbmV0U2VydmljZSkge1xuICAgIHRoaXMuc3dhcGlBZGFwdGVyID0gc3dhcGlBZGFwdGVyO1xuICAgIHRoaXMucGxhbmV0U2VydmljZSA9IHBsYW5ldFNlcnZpY2U7XG4gIH1cblxuICBhc3luYyBnZXRTcGVjaWVzQnlJZChpZDogc3RyaW5nKTogUHJvbWlzZTxTcGVjaWVzPiB7XG4gICAgY29uc3Qgc3BlY2llc0RhdGEgPSBhd2FpdCB0aGlzLnN3YXBpQWRhcHRlci5nZXRTcGVjaWVzKGlkKTtcblxuICAgIGlmKCFzcGVjaWVzRGF0YS5ob21ld29ybGQpIHtcbiAgICAgIHJldHVybiBtYXBUb1NwZWNpZXMoc3BlY2llc0RhdGEsIG51bGwpO1xuICAgIH1cblxuICAgIGNvbnN0IHBsYW5ldElkID0gdGhpcy5leHRyYWN0SWRGcm9tVXJsKHNwZWNpZXNEYXRhLmhvbWV3b3JsZCk7XG4gICAgY29uc3QgcGxhbmV0RGF0YSA9IGF3YWl0IHRoaXMucGxhbmV0U2VydmljZS5nZXRQbGFuZXRCeUlkKHBsYW5ldElkKTtcblxuICAgIHJldHVybiBtYXBUb1NwZWNpZXMoc3BlY2llc0RhdGEsIHBsYW5ldERhdGEpO1xuICB9XG5cbiAgYXN5bmMgZ2V0QWxsU3BlY2llcyhzb3J0Pzogc3RyaW5nLCBvcmRlcjogJ2FzYycgfCAnZGVzYycgPSAnYXNjJyk6IFByb21pc2U8U3BlY2llc1tdPiB7XG4gICAgY29uc3QgYWxsU3BlY2llc0RhdGEgPSBhd2FpdCB0aGlzLnN3YXBpQWRhcHRlci5nZXRBbGxTcGVjaWVzKCk7XG5cbiAgICBjb25zdCBlbmhhbmNlZFNwZWNpZXMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIGFsbFNwZWNpZXNEYXRhLm1hcChhc3luYyAoc3BlY2llc0RhdGEpID0+IHtcbiAgICAgICAgaWYgKCFzcGVjaWVzRGF0YS5ob21ld29ybGQpIHtcbiAgICAgICAgICByZXR1cm4gbWFwVG9TcGVjaWVzKHNwZWNpZXNEYXRhLCBudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBsYW5ldElkID0gdGhpcy5leHRyYWN0SWRGcm9tVXJsKHNwZWNpZXNEYXRhLmhvbWV3b3JsZCk7XG4gICAgICAgIGNvbnN0IHBsYW5ldERhdGEgPSBhd2FpdCB0aGlzLnBsYW5ldFNlcnZpY2UuZ2V0UGxhbmV0QnlJZChwbGFuZXRJZCk7XG5cbiAgICAgICAgcmV0dXJuIG1hcFRvU3BlY2llcyhzcGVjaWVzRGF0YSwgcGxhbmV0RGF0YSk7XG4gICAgICB9KVxuICAgICk7XG5cbiAgICBpZiAoc29ydCA9PT0gJ2F2ZXJhZ2VfaGVpZ2h0Jykge1xuICAgICAgcmV0dXJuIHRoaXMuc29ydFNwZWNpZXNCeUF2ZXJhZ2VIZWlnaHQoZW5oYW5jZWRTcGVjaWVzLCBvcmRlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VkU3BlY2llcztcbiAgfVxuXG4gIHNvcnRTcGVjaWVzQnlBdmVyYWdlSGVpZ2h0KHNwZWNpZXM6IFNwZWNpZXNbXSwgb3JkZXI6ICdhc2MnIHwgJ2Rlc2MnKTogU3BlY2llc1tdIHtcbiAgICByZXR1cm4gWy4uLnNwZWNpZXNdLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIGNvbnN0IGhlaWdodEEgPSB0aGlzLnBhcnNlSGVpZ2h0KGEuYXZlcmFnZV9oZWlnaHQpO1xuICAgICAgY29uc3QgaGVpZ2h0QiA9IHRoaXMucGFyc2VIZWlnaHQoYi5hdmVyYWdlX2hlaWdodCk7XG5cbiAgICAgIC8vIEFsd2F5cyBwbGFjZSBudWxscyBhdCB0aGUgZW5kIHJlZ2FyZGxlc3Mgb2Ygc29ydCBvcmRlclxuICAgICAgaWYgKGhlaWdodEEgPT09IG51bGwpIHJldHVybiAxO1xuICAgICAgaWYgKGhlaWdodEIgPT09IG51bGwpIHJldHVybiAtMTtcblxuICAgICAgcmV0dXJuIG9yZGVyID09PSAnYXNjJyA/IGhlaWdodEEgLSBoZWlnaHRCIDogaGVpZ2h0QiAtIGhlaWdodEE7XG4gICAgfSk7XG4gIH1cblxuICAvLyBQYXJzZSB0aGUgaGVpZ2h0IGFzIGEgbnVtYmVyLCByZXR1cm4gbnVsbCBpZiBpdCdzIG5vdCBhIG51bWJlciAobGlrZSBcInVuZGVmaW5lZFwiKVxuICBwcml2YXRlIHBhcnNlSGVpZ2h0KGhlaWdodDogc3RyaW5nKTogbnVtYmVyIHwgbnVsbCB7XG4gICAgY29uc3QgcGFyc2VkID0gcGFyc2VGbG9hdChoZWlnaHQpO1xuICAgIHJldHVybiBpc05hTihwYXJzZWQpID8gbnVsbCA6IHBhcnNlZDtcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdElkRnJvbVVybCh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgLy8gUmVtb3ZlIHRyYWlsaW5nIHNsYXNoIGlmIHByZXNlbnRcbiAgICBjb25zdCBjbGVhblVybCA9IHVybC5lbmRzV2l0aCgnLycpID8gdXJsLnNsaWNlKDAsIC0xKSA6IHVybDtcbiAgICAvLyBHZXQgdGhlIGxhc3QgcGFydCBvZiB0aGUgVVJMIHdoaWNoIHNob3VsZCBiZSB0aGUgSURcbiAgICByZXR1cm4gY2xlYW5Vcmwuc3BsaXQoJy8nKS5wb3AoKSB8fCAnJztcbiAgfVxufSJdLCJ2ZXJzaW9uIjozfQ==