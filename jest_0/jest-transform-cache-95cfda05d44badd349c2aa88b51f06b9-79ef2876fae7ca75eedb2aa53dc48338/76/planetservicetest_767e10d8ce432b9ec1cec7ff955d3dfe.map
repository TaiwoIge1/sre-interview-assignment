{"file":"/tmp/src/services/planet.service.test.ts","mappings":"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","names":[],"sources":["/tmp/src/services/planet.service.test.ts"],"sourcesContent":["import { PlanetService } from './planet.service';\nimport { SwapiAdapter } from '../adapters/swapi.adapter';\nimport { PlanetRepository } from '../repositories/planet.repository';\nimport { SwapiPlanet } from '../types/swapi.types';\n\njest.mock('../adapters/swapi.adapter');\njest.mock('../repositories/planet.repository');\n\ndescribe('PlanetService', () => {\n  let planetService: PlanetService;\n  let mockSwapiAdapter: jest.Mocked<SwapiAdapter>;\n  let mockPlanetRepository: jest.Mocked<PlanetRepository>;\n\n  const mockSwapiPlanet: SwapiPlanet = {\n    name: 'Tatooine',\n    rotation_period: '23',\n    orbital_period: '304',\n    diameter: '10465',\n    climate: 'arid',\n    gravity: '1 standard',\n    terrain: 'desert',\n    surface_water: '1',\n    population: '200000',\n    residents: ['https://swapi.dev/api/people/1/'],\n    films: ['https://swapi.dev/api/films/1/'],\n    created: '2014-12-09T13:50:49.641000Z',\n    edited: '2014-12-20T20:58:18.411000Z',\n    url: 'https://swapi.dev/api/planets/1/'\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    mockSwapiAdapter = new SwapiAdapter() as jest.Mocked<SwapiAdapter>;\n    mockPlanetRepository = new PlanetRepository() as jest.Mocked<PlanetRepository>;\n\n    planetService = new PlanetService(mockSwapiAdapter, mockPlanetRepository);\n  });\n\n  describe('getPlanetById', () => {\n    it('should return planet data with destruction status false when planet exists in DB and is not destroyed', async () => {\n      mockSwapiAdapter.getPlanet.mockResolvedValue(mockSwapiPlanet);\n      mockPlanetRepository.getPlanetDestructionStatus.mockResolvedValue(false);\n\n      const result = await planetService.getPlanetById('1');\n\n      expect(result).toEqual({\n        ...mockSwapiPlanet,\n        destroyed: false\n      });\n      expect(mockSwapiAdapter.getPlanet).toHaveBeenCalledWith('1');\n      expect(mockPlanetRepository.getPlanetDestructionStatus).toHaveBeenCalledWith('1');\n    });\n\n    it('should return planet data with destruction status true when planet exists in DB and is destroyed', async () => {\n      mockSwapiAdapter.getPlanet.mockResolvedValue(mockSwapiPlanet);\n      mockPlanetRepository.getPlanetDestructionStatus.mockResolvedValue(true);\n\n      const result = await planetService.getPlanetById('1');\n\n      expect(result).toEqual({\n        ...mockSwapiPlanet,\n        destroyed: true\n      });\n    });\n\n    it('should return planet data with destruction status false when planet does not exist in DB', async () => {\n      mockSwapiAdapter.getPlanet.mockResolvedValue(mockSwapiPlanet);\n      mockPlanetRepository.getPlanetDestructionStatus.mockResolvedValue(null);\n\n      const result = await planetService.getPlanetById('1');\n\n      expect(result).toEqual({\n        ...mockSwapiPlanet,\n        destroyed: false\n      });\n    });\n\n    it('should not swallow errors from SWAPI', async () => {\n      const error = new Error('SWAPI error');\n      mockSwapiAdapter.getPlanet.mockRejectedValue(error);\n\n      await expect(planetService.getPlanetById('1')).rejects.toThrow(error);\n    });\n\n    it('should not swallow errors from repository', async () => {\n      mockSwapiAdapter.getPlanet.mockResolvedValue(mockSwapiPlanet);\n\n      const error = new Error('Repository error');\n      mockPlanetRepository.getPlanetDestructionStatus.mockRejectedValue(error);\n\n      await expect(planetService.getPlanetById('1')).rejects.toThrow(error);\n    });\n  });\n\n  describe('updatePlanetDestructionStatus', () => {\n    it('should update planet destruction status and return updated planet', async () => {\n      mockPlanetRepository.upsertPlanetDestructionStatus.mockResolvedValue(undefined);\n      mockSwapiAdapter.getPlanet.mockResolvedValue(mockSwapiPlanet);\n      mockPlanetRepository.getPlanetDestructionStatus.mockResolvedValue(true);\n\n      const result = await planetService.upsertPlanetDestructionStatus('1', true);\n\n      expect(result).toEqual({\n        ...mockSwapiPlanet,\n        destroyed: true\n      });\n\n      expect(mockPlanetRepository.upsertPlanetDestructionStatus).toHaveBeenCalledWith('1', true);\n      expect(mockSwapiAdapter.getPlanet).toHaveBeenCalledWith('1');\n      expect(mockPlanetRepository.getPlanetDestructionStatus).toHaveBeenCalledWith('1');\n    });\n\n    it('should not swallow errors from repository during update', async () => {\n      const error = new Error('Update error');\n      mockPlanetRepository.upsertPlanetDestructionStatus.mockRejectedValue(error);\n\n      await expect(planetService.upsertPlanetDestructionStatus('1', true)).rejects.toThrow(error);\n    });\n  });\n}); "],"version":3}