{"file":"/tmp/src/utils/sanitize.ts","mappings":";;;;;AAEA,wCASC;AAED,gCAQC;AAED,oCAUC;AAED,sCAUC;AA7CD,0DAAkC;AAElC,SAAgB,cAAc,CAAC,KAAgC;IAC7D,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;QAC1C,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,MAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;IAE1B,iCAAiC;IACjC,OAAO,mBAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC/B,CAAC;AAED,SAAgB,UAAU,CAAC,EAA6B;IACtD,IAAI,EAAE,KAAK,SAAS,IAAI,EAAE,KAAK,IAAI,EAAE,CAAC;QACpC,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,MAAM,GAAG,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC;IAEvB,OAAO,mBAAS,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;AAClD,CAAC;AAED,SAAgB,YAAY,CAAC,IAA+B;IAC1D,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,EAAE,CAAC;QACxC,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,kCAAkC;IAClC,MAAM,YAAY,GAAG,CAAC,gBAAgB,CAAC,CAAC;IACxC,MAAM,SAAS,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;IAEvC,OAAO,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;AAClE,CAAC;AAED,SAAgB,aAAa,CAAC,KAAgC;IAC5D,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;QAC1C,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,mCAAmC;IACnC,MAAM,SAAS,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;IAExC,wDAAwD;IACxD,OAAO,SAAS,KAAK,KAAK,IAAI,SAAS,KAAK,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;AAC7E,CAAC","names":[],"sources":["/tmp/src/utils/sanitize.ts"],"sourcesContent":["import validator from 'validator';\n\nexport function sanitizeString(input: string | undefined | null): string {\n  if (input === undefined || input === null) {\n    return '';\n  }\n\n  const str = String(input);\n\n  // Escape HTML special characters\n  return validator.escape(str);\n}\n\nexport function sanitizeId(id: string | undefined | null): string {\n  if (id === undefined || id === null) {\n    return '';\n  }\n\n  const str = String(id);\n\n  return validator.isAlphanumeric(str) ? str : '';\n}\n\nexport function sanitizeSort(sort: string | undefined | null): string | undefined {\n  if (sort === undefined || sort === null) {\n    return undefined;\n  }\n\n  // Only allow specific sort values\n  const allowedSorts = ['average_height'];\n  const sanitized = sanitizeString(sort);\n\n  return allowedSorts.includes(sanitized) ? sanitized : undefined;\n}\n\nexport function sanitizeOrder(order: string | undefined | null): 'asc' | 'desc' | undefined {\n  if (order === undefined || order === null) {\n    return undefined;\n  }\n\n  // Only allow specific order values\n  const sanitized = sanitizeString(order);\n\n  // Return the sanitized value only if it's a valid order\n  return sanitized === 'asc' || sanitized === 'desc' ? sanitized : undefined;\n}"],"version":3}