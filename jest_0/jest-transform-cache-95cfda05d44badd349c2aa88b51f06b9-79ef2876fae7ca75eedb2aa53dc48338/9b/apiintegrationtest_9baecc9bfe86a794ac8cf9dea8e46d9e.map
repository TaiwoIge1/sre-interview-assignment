{"file":"/tmp/src/tests/api.integration.test.ts","mappings":"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","names":[],"sources":["/tmp/src/tests/api.integration.test.ts"],"sourcesContent":["import { build } from '../server';\nimport { FastifyInstance } from 'fastify';\nimport supertest from 'supertest';\njest.mock('../repositories/planet.repository', () => {\n  // Create a simple in-memory \"database\"\n  const planetStatus = {\n    '1': false,  // Tatooine - not destroyed\n    '2': true    // Alderaan - destroyed\n  };\n\n  return {\n    PlanetRepository: jest.fn().mockImplementation(() => {\n      return {\n        getPlanetDestructionStatus: jest.fn().mockImplementation((id) => {\n          return Promise.resolve(planetStatus[id] !== undefined ? planetStatus[id] : null);\n        }),\n        upsertPlanetDestructionStatus: jest.fn().mockImplementation((id, destroyed) => {\n          planetStatus[id] = destroyed;\n          return Promise.resolve();\n        })\n      };\n    })\n  };\n});\n\njest.mock('../adapters/swapi.adapter', () => {\n  const speciesData = [\n    {\n      name: 'Human',\n      classification: 'mammal',\n      designation: 'sentient',\n      average_height: '180',\n      skin_colors: 'caucasian, black, asian, hispanic',\n      hair_colors: 'blonde, brown, black, red',\n      eye_colors: 'brown, blue, green, hazel, grey, amber',\n      average_lifespan: '120',\n      homeworld: 'https://swapi.dev/api/planets/1/',\n      language: 'Galactic Basic',\n      people: ['https://swapi.dev/api/people/1/'],\n      films: ['https://swapi.dev/api/films/1/'],\n      created: '2014-12-09T13:50:49.641000Z',\n      edited: '2014-12-20T20:58:18.411000Z',\n      url: 'https://swapi.dev/api/species/1/'\n    },\n    {\n      name: 'Wookie',\n      classification: 'mammal',\n      designation: 'sentient',\n      average_height: '210',\n      skin_colors: 'gray',\n      hair_colors: 'black, brown',\n      eye_colors: 'blue, green, yellow, brown, golden, red',\n      average_lifespan: '400',\n      homeworld: 'https://swapi.dev/api/planets/2/',\n      language: 'Shyriiwook',\n      people: ['https://swapi.dev/api/people/13/'],\n      films: ['https://swapi.dev/api/films/1/'],\n      created: '2014-12-10T16:44:31.486000Z',\n      edited: '2014-12-20T21:36:42.142000Z',\n      url: 'https://swapi.dev/api/species/2/'\n    }\n  ];\n\n  const planetData = {\n    '1': {\n      name: 'Tatooine',\n      rotation_period: '23',\n      orbital_period: '304',\n      diameter: '10465',\n      climate: 'arid',\n      gravity: '1 standard',\n      terrain: 'desert',\n      surface_water: '1',\n      population: '200000',\n      residents: ['https://swapi.dev/api/people/1/'],\n      films: ['https://swapi.dev/api/films/1/'],\n      created: '2014-12-09T13:50:49.641000Z',\n      edited: '2014-12-20T20:58:18.411000Z',\n      url: 'https://swapi.dev/api/planets/1/'\n    },\n    '2': {\n      name: 'Alderaan',\n      rotation_period: '24',\n      orbital_period: '364',\n      diameter: '12500',\n      climate: 'temperate',\n      gravity: '1 standard',\n      terrain: 'grasslands, mountains',\n      surface_water: '40',\n      population: '2000000000',\n      residents: ['https://swapi.dev/api/people/5/'],\n      films: ['https://swapi.dev/api/films/1/'],\n      created: '2014-12-10T11:35:48.479000Z',\n      edited: '2014-12-20T20:58:18.420000Z',\n      url: 'https://swapi.dev/api/planets/2/'\n    }\n  };\n\n  return {\n    SwapiAdapter: jest.fn().mockImplementation(() => {\n      return {\n        getSpecies: jest.fn().mockImplementation((id) => {\n          const species = speciesData.find(s => s.url.endsWith(`/${id}/`));\n          if (!species) {\n            return Promise.reject(new Error(`Species with ID ${id} not found`));\n          }\n          return Promise.resolve(species);\n        }),\n        getAllSpecies: jest.fn().mockResolvedValue(speciesData),\n        getPlanet: jest.fn().mockImplementation((id) => {\n          const planet = planetData[id];\n          if (!planet) {\n            return Promise.reject(new Error(`Planet with ID ${id} not found`));\n          }\n          return Promise.resolve(planet);\n        })\n      };\n    })\n  };\n});\n\ndescribe('Basic API Integration Tests - Core Functionality', () => {\n  let app: FastifyInstance;\n  let request: any;\n\n  beforeAll(async () => {\n    app = build();\n    await app.ready();\n    request = supertest(app.server);\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n\n  test('GET /species should return all species with their homeworlds', async () => {\n    const response = await request.get('/species');\n\n    expect(response.status).toBe(200);\n    expect(response.body).toHaveProperty('species');\n    expect(Array.isArray(response.body.species)).toBe(true);\n    expect(response.body.species.length).toBeGreaterThan(0);\n\n    const species = response.body.species[0];\n    expect(species).toHaveProperty('name');\n    expect(species).toHaveProperty('classification');\n    expect(species).toHaveProperty('designation');\n    expect(species).toHaveProperty('average_height');\n\n    const speciesWithHomeworld = response.body.species.find(s => s.homeworld);\n    if (speciesWithHomeworld) {\n      expect(speciesWithHomeworld.homeworld).toHaveProperty('name');\n      expect(speciesWithHomeworld.homeworld).toHaveProperty('climate');\n      expect(speciesWithHomeworld.homeworld).toHaveProperty('terrain');\n      expect(speciesWithHomeworld.homeworld).toHaveProperty('destroyed');\n    }\n  });\n\n  test('GET /species?sort=average_height&order=desc should return species sorted by height', async () => {\n    const response = await request.get('/species?sort=average_height&order=desc');\n\n    expect(response.status).toBe(200);\n    expect(response.body).toHaveProperty('species');\n    expect(Array.isArray(response.body.species)).toBe(true);\n\n    expect(response.body.species[0].name).toBe('Wookie');\n    expect(response.body.species[1].name).toBe('Human');\n  });\n\n  test('GET /species/:id should return a specific species with its homeworld', async () => {\n    const response = await request.get('/species/1');\n\n    expect(response.status).toBe(200);\n    expect(response.body).toHaveProperty('species');\n    expect(response.body.species).toHaveProperty('name', 'Human');\n    expect(response.body.species).toHaveProperty('classification', 'mammal');\n\n    expect(response.body.species.homeworld).toHaveProperty('name', 'Tatooine');\n    expect(response.body.species.homeworld).toHaveProperty('destroyed', false);\n  });\n\n  test('PUT /planets/:id/destruction should update a planet\\'s destruction status', async () => {\n    const response = await request\n      .put('/planets/1/destruction')\n      .send({ destroyed: true });\n\n    expect(response.status).toBe(200);\n    expect(response.body).toHaveProperty('planet');\n    expect(response.body.planet).toHaveProperty('destroyed', true);\n\n    const verifyResponse = await request.get('/species/1');\n    expect(verifyResponse.body.species.homeworld.destroyed).toBe(true);\n\n    await request\n      .put('/planets/1/destruction')\n      .send({ destroyed: false });\n  });\n});"],"version":3}