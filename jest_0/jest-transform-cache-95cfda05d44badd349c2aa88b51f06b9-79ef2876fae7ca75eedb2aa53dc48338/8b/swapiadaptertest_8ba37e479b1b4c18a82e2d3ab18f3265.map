{"file":"/tmp/src/adapters/swapi.adapter.test.ts","mappings":"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","names":[],"sources":["/tmp/src/adapters/swapi.adapter.test.ts"],"sourcesContent":["import { SwapiAdapter } from './swapi.adapter';\nimport { SwapiSpecies, SwapiPlanet, SwapiPaginatedResponse } from '../types/swapi.types';\n\nglobal.fetch = jest.fn();\n\ndescribe('SwapiAdapter', () => {\n  let swapiAdapter: SwapiAdapter;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    swapiAdapter = new SwapiAdapter();\n  });\n\n  describe('getSpecies', () => {\n    test('should fetch species data successfully', async () => {\n      const mockSpecies: SwapiSpecies = {\n        name: 'Human',\n        classification: 'mammal',\n        designation: 'sentient',\n        average_height: '180',\n        skin_colors: 'caucasian, black, asian, hispanic',\n        hair_colors: 'blonde, brown, black, red',\n        eye_colors: 'brown, blue, green, hazel, grey, amber',\n        average_lifespan: '120',\n        homeworld: 'https://swapi.dev/api/planets/9/',\n        language: 'Galactic Basic',\n        people: ['https://swapi.dev/api/people/1/'],\n        films: ['https://swapi.dev/api/films/1/'],\n        created: '2014-12-10T13:52:11.567000Z',\n        edited: '2014-12-20T21:36:42.136000Z',\n        url: 'https://swapi.dev/api/species/1/'\n      };\n\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        json: jest.fn().mockResolvedValue(mockSpecies)\n      });\n\n      const result = await swapiAdapter.getSpecies('1');\n\n      expect(result).toEqual(mockSpecies);\n      expect(global.fetch).toHaveBeenCalledWith('https://swapi.dev/api/species/1');\n    });\n\n    test('should throw error when species not found', async () => {\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: false,\n        status: 404,\n        statusText: 'Not Found'\n      });\n\n      const resultPromise = swapiAdapter.getSpecies('999');\n\n      await expect(resultPromise).rejects.toThrow(/^Species with ID 999 not found$/);\n      expect(global.fetch).toHaveBeenCalledWith('https://swapi.dev/api/species/999');\n    });\n\n    test('should throw error for server errors', async () => {\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: false,\n        status: 500,\n        statusText: 'Internal Server Error'\n      });\n\n      const resultPromise = swapiAdapter.getSpecies('1');\n\n      await expect(resultPromise).rejects.toThrow(/^Error fetching species: Internal Server Error$/);\n      expect(global.fetch).toHaveBeenCalledWith('https://swapi.dev/api/species/1');\n    });\n\n    test('should throw error when network fails', async () => {\n      const networkError = new Error('Failed to fetch');\n      (global.fetch as jest.Mock).mockRejectedValue(networkError);\n\n      const resultPromise = swapiAdapter.getSpecies('1');\n\n      await expect(resultPromise).rejects.toThrow(/^Failed to fetch$/);\n    });\n  });\n\n  describe('getAllSpecies', () => {\n    it('should fetch all species across multiple pages', async () => {\n      const mockSpecies1 = {\n        name: 'Human',\n        classification: 'mammal',\n        designation: 'sentient',\n        average_height: '180',\n        skin_colors: 'caucasian, black, asian, hispanic',\n        hair_colors: 'blonde, brown, black, red',\n        eye_colors: 'brown, blue, green, hazel, grey, amber',\n        average_lifespan: '120',\n        homeworld: 'https://swapi.dev/api/planets/9/',\n        language: 'Galactic Basic',\n        people: ['https://swapi.dev/api/people/1/'],\n        films: ['https://swapi.dev/api/films/1/'],\n        created: '2014-12-10T13:52:11.567000Z',\n        edited: '2014-12-20T21:36:42.136000Z',\n        url: 'https://swapi.dev/api/species/1/'\n      };\n\n      const mockSpecies2 = {\n        name: 'Droid',\n        classification: 'artificial',\n        designation: 'sentient',\n        average_height: 'n/a',\n        skin_colors: 'n/a',\n        hair_colors: 'n/a',\n        eye_colors: 'n/a',\n        average_lifespan: 'indefinite',\n        homeworld: null,\n        language: 'n/a',\n        people: ['https://swapi.dev/api/people/2/'],\n        films: ['https://swapi.dev/api/films/1/'],\n        created: '2014-12-10T15:16:16.259000Z',\n        edited: '2014-12-20T21:36:42.139000Z',\n        url: 'https://swapi.dev/api/species/2/'\n      };\n\n      const mockSpecies3 = {\n        name: 'Wookie',\n        classification: 'mammal',\n        designation: 'sentient',\n        average_height: '210',\n        skin_colors: 'gray',\n        hair_colors: 'black, brown',\n        eye_colors: 'blue, green, yellow, brown, golden, red',\n        average_lifespan: '400',\n        homeworld: 'https://swapi.dev/api/planets/14/',\n        language: 'Shyriiwook',\n        people: ['https://swapi.dev/api/people/13/'],\n        films: ['https://swapi.dev/api/films/1/'],\n        created: '2014-12-10T16:44:31.486000Z',\n        edited: '2014-12-20T21:36:42.142000Z',\n        url: 'https://swapi.dev/api/species/3/'\n      };\n\n      const mockPage1: SwapiPaginatedResponse<SwapiSpecies> = {\n        count: 3,\n        next: 'https://swapi.dev/api/species/?page=2',\n        previous: null,\n        results: [mockSpecies1, mockSpecies2]\n      };\n\n      const mockPage2: SwapiPaginatedResponse<SwapiSpecies> = {\n        count: 3,\n        next: null,\n        previous: 'https://swapi.dev/api/species/?page=1',\n        results: [mockSpecies3]\n      };\n\n      (global.fetch as jest.Mock).mockImplementation((url: string) => {\n        if (url.includes('page=1')) {\n          return Promise.resolve({\n            ok: true,\n            json: jest.fn().mockResolvedValue(mockPage1)\n          });\n        } else if (url.includes('page=2')) {\n          return Promise.resolve({\n            ok: true,\n            json: jest.fn().mockResolvedValue(mockPage2)\n          });\n        } else {\n          return Promise.resolve({\n            ok: false,\n            status: 404,\n            statusText: 'Not Found'\n          });\n        }\n      });\n\n      const result = await swapiAdapter.getAllSpecies();\n\n      expect(global.fetch).toHaveBeenCalledTimes(2);\n      expect(global.fetch).toHaveBeenCalledWith('https://swapi.dev/api/species/?page=1');\n      expect(global.fetch).toHaveBeenCalledWith('https://swapi.dev/api/species/?page=2');\n\n      expect(result).toHaveLength(3);\n      expect(result[0].name).toBe('Human');\n      expect(result[1].name).toBe('Droid');\n      expect(result[2].name).toBe('Wookie');\n    });\n\n    it('should handle errors during fetching all species', async () => {\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: false,\n        status: 500,\n        statusText: 'Internal Server Error'\n      });\n\n      await expect(swapiAdapter.getAllSpecies()).rejects.toThrow('Error fetching species page: Internal Server Error');\n\n      expect(global.fetch).toHaveBeenCalledWith('https://swapi.dev/api/species/?page=1');\n    });\n\n    it('should handle case where there is only one page', async () => {\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        json: jest.fn().mockResolvedValue({\n          count: 2,\n          next: null,\n          previous: null,\n          results: [\n            { name: 'Human' },\n            { name: 'Droid' }\n          ]\n        })\n      });\n\n      const result = await swapiAdapter.getAllSpecies();\n\n      expect(global.fetch).toHaveBeenCalledTimes(1);\n      expect(global.fetch).toHaveBeenCalledWith('https://swapi.dev/api/species/?page=1');\n\n      expect(result).toHaveLength(2);\n      expect(result[0].name).toBe('Human');\n      expect(result[1].name).toBe('Droid');\n    });\n  });\n\n  describe('getPlanet', () => {\n    test('should fetch planet data successfully', async () => {\n      const mockPlanet: SwapiPlanet = {\n        name: 'Tatooine',\n        rotation_period: '23',\n        orbital_period: '304',\n        diameter: '10465',\n        climate: 'arid',\n        gravity: '1 standard',\n        terrain: 'desert',\n        surface_water: '1',\n        population: '200000',\n        residents: ['https://swapi.dev/api/people/1/'],\n        films: ['https://swapi.dev/api/films/1/'],\n        created: '2014-12-09T13:50:49.641000Z',\n        edited: '2014-12-20T20:58:18.411000Z',\n        url: 'https://swapi.dev/api/planets/1/'\n      };\n\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        json: jest.fn().mockResolvedValue(mockPlanet)\n      });\n\n      const result = await swapiAdapter.getPlanet('1');\n\n      expect(result).toEqual(mockPlanet);\n      expect(global.fetch).toHaveBeenCalledWith('https://swapi.dev/api/planets/1');\n    });\n\n    test('should throw error when planet not found', async () => {\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: false,\n        status: 404,\n        statusText: 'Not Found'\n      });\n\n      const resultPromise = swapiAdapter.getPlanet('999');\n\n      await expect(resultPromise).rejects.toThrow(/^Planet with ID 999 not found$/);\n      expect(global.fetch).toHaveBeenCalledWith('https://swapi.dev/api/planets/999');\n    });\n\n    test('should throw error for server errors', async () => {\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: false,\n        status: 500,\n        statusText: 'Internal Server Error'\n      });\n\n      const resultPromise = swapiAdapter.getPlanet('1');\n\n      await expect(resultPromise).rejects.toThrow(/^Error fetching planet: Internal Server Error$/);\n      expect(global.fetch).toHaveBeenCalledWith('https://swapi.dev/api/planets/1');\n    });\n\n    test('should throw error when network fails', async () => {\n      const networkError = new Error('Failed to fetch');\n      (global.fetch as jest.Mock).mockRejectedValue(networkError);\n\n      const resultPromise = swapiAdapter.getPlanet('1');\n\n      await expect(resultPromise).rejects.toThrow(/^Failed to fetch$/);\n    });\n  });\n});"],"version":3}